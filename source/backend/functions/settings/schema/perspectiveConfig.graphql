# An AWS region that AWS Perspective is scanning
type Region @aws_cognito_user_pools @aws_iam {
  # The name of the region
  name: String!
  # The the timestamp of the last successful crawl by the discovery process
  lastCrawled: String
}

# An AWS account that AWS Perspective is scanning
type Account @aws_cognito_user_pools @aws_iam {
  # The AWS account number
  accountId: String!
  # The regions AWS Perspective is enabled on
  regions: [Region]!
  lastCrawled: AWSDateTime
}

input RegionInput {
  # The name of the region
  name: String!
  # The the timestamp of the last successful crawl by the discovery process
  lastCrawled: AWSDateTime
}

input AccountInput {
  # The AWS account number
  accountId: String!
  # The regions AWS Perspective is enabled on
  regions: [RegionInput]
}

type UnprocessedAccounts @aws_cognito_user_pools @aws_iam {
  # Accounts that encountered an issue when being mutated
  unprocessedAccounts: [String]
}

type Mutation {
  # Adds accounts to be scanned
  addAccounts(accounts: [AccountInput]): UnprocessedAccounts
  # Updates an account
  updateAccount(accountId: String!, lastCrawled: AWSDateTime): Account @aws_cognito_user_pools @aws_iam
  # Updates one or more regions to be scanned
  updateRegions(accountId: String!, regions: [RegionInput]!): Account @aws_cognito_user_pools @aws_iam
  # Adds one or more regions to be scanned
  addRegions(accountId: String!, regions: [RegionInput]!): Account
  # Deletes one or more regions to be scanned
  deleteRegions(accountId: String!, regions: [RegionInput]!): Account
  # Deletes one or more accounts to be scanned
  deleteAccounts(accountIds: [String]!): UnprocessedAccounts
}

type Query {
  # Gets a single account and the regions that are being scanned
  getAccount(accountId: String!) : Account
  # Gets each account and its associated regions that are being scanned
  getAccounts : [Account] @aws_cognito_user_pools @aws_iam
}

schema {
  query: Query
  mutation: Mutation
}