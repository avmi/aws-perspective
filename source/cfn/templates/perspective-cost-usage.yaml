AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Description: Perspective cost analyser stack

Parameters:

  PerspectiveCostUsageReportBucketName:
    Description: The Name of the bucket where you will upload Cost and Usage Reports
    Type: String

  CostReportCodeBucket:
    Description: The location of the code that will form the lambda function
    Type: String

  CostReportCodeBucketKey:
    Description: The key of the deployment code for cost report
    Type: String
  
  AccessLogsBucket:
    Description: The bucket that will store Perspective access logs for S3 buckets
    Type: String

Resources:

  PerspectiveCostDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: resourceDayKey
          AttributeType: S
      KeySchema:
        - AttributeName: resourceDayKey
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  PerspectiveCostBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfter90Days
            Prefix: ''
            Status: Enabled
            ExpirationInDays: 90
      BucketName: !Ref PerspectiveCostUsageReportBucketName
      AccessControl: Private
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessLogsBucket
        LogFilePrefix: 'perspective-cost-bucket/'
      VersioningConfiguration:
        Status: Enabled
  
  PerspectiveCostBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PerspectiveCostBucket
      PolicyDocument:
        Statement:
          - Sid: LambdaAccessToS3
            Effect: Allow
            Principal:
              AWS: !GetAtt PerspectiveCostRole.Arn
            Action:
              - s3:DeleteObject
              - s3:GetObject
              - s3:PutObject
              - s3:ReplicateObject
              - s3:RestoreObject
            Resource:
              - !Sub arn:aws:s3:::${PerspectiveCostBucket}
              - !Sub arn:aws:s3:::${PerspectiveCostBucket}/*
          - Sid: HttpsOnly
            Action: '*'
            Effect: Deny
            Resource: !Sub arn:aws:s3:::${PerspectiveCostBucket}/*
            Principal: '*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  PerspectiveCostRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: persepectiveCostS3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ReplicateObject
                  - s3:RestoreObject
                Resource: !Sub arn:aws:s3:::${PerspectiveCostUsageReportBucketName}/*
        - PolicyName: persepectiveCostDynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt PerspectiveCostDBTable.Arn

  PerspectiveCostLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: costParser.handler
      Runtime: nodejs12.x
      Timeout: 600
      MemorySize: 3008
      CodeUri:
        Bucket: !Ref CostReportCodeBucket
        Key: !Sub ${CostReportCodeBucketKey}/cost-parser.zip
      Role: !GetAtt PerspectiveCostRole.Arn
      Environment:
        Variables:
          DynamoCostTable: !Ref PerspectiveCostDBTable
      Events:
        CostUploadEvent:
          Type: S3
          Properties:
            Bucket: !Ref PerspectiveCostBucket
            Events: s3:ObjectCreated:*

Outputs:

  PerspectiveCostDBTable:
    Value: !Ref PerspectiveCostDBTable

  PerspectiveCostDBTableARN:
    Value: !GetAtt PerspectiveCostDBTable.Arn

  PerspectiveCostBucket:
    Value: PerspectiveCostUsageReportBucketName
