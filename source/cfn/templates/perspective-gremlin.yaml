AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Description: AWS Perspective Gemlin Lambda Stack

Parameters:
  DeploymentBucket:
    Type: String

  DeploymentBucketKey:
    Type: String

  VpcId:
    Type: AWS::EC2::VPC::Id

  VPCCidrBlock:
    Type: String

  PrivateSubnet0:
    Type: AWS::EC2::Subnet::Id

  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id

  NeptuneDbSg:
    Type: AWS::EC2::SecurityGroup::Id

  DiscoveryStoreBucket:
    Type: String

  NeptuneClusterURL:
    Type: String

  NeptuneClusterPort:
    Type: String

  NeptuneClusterResourceId:
    Type: String

  ConfigurationAggregator:
    Type: String

  PerspectiveCostTableName:
    Type: String

  PerspectiveCostTableArn:
    Type: String

Resources:
  GremlinLambdaSg:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F1000
            reason: We are looking to introduce VPCe for Config that will let us lock this down futher.
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Gremlin lambda
      VpcId: !Ref VpcId

  NeptuneDbSgIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress Security Group for Neptune
      FromPort: !Ref NeptuneClusterPort
      ToPort: !Ref NeptuneClusterPort
      GroupId: !Ref NeptuneDbSg
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref GremlinLambdaSg

  GremlinFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaFunctionRole.Arn
      Handler: index.handler
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: !Sub ${DeploymentBucketKey}/api.zip
      Runtime: nodejs12.x
      Description: Lambda for querying and writing to Neptune
      Timeout: 10
      VpcConfig:
        SecurityGroupIds:
          - !Ref GremlinLambdaSg
        SubnetIds:
          - !Ref PrivateSubnet0
          - !Ref PrivateSubnet1
      MemorySize: 1024
      Tracing: Active
      Environment:
        Variables:
          neptuneConnectURL: !Ref NeptuneClusterURL
          neptunePort: !Ref NeptuneClusterPort
          costDataEnabled: 'true'
          DynamoCostTable: !Ref PerspectiveCostTableName
          configurationAggregator: !Ref ConfigurationAggregator
          region: !Ref AWS::Region
          accountId: !Ref AWS::AccountId

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GremlinLambdaFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - neptune-db:connect
                Resource: !Sub arn:aws:neptune-db:${AWS::Region}:${AWS::AccountId}:${NeptuneClusterResourceId}/*
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                Resource: !Ref PerspectiveCostTableArn

  GremlinLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if gremlin lambda function errors out too many times
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref GremlinFunction
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 10
      EvaluationPeriods: 3
      Period: 60
      TreatMissingData: breaching

Outputs:
  GremlinARN:
    Description: Gremlin function details
    Value: !GetAtt GremlinFunction.Arn
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-GremlinARN
