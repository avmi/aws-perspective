AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Description: AWS Perspective Appsync Api

Parameters:

  DeploymentBucket:
    Type: String

  DeploymentBucketKey:
    Type: String

  PerspectiveAppSyncApiId:
    Type: String

  ConfigurationAggregator:
    Type: String

Resources:

  PerspectiveSettingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  PerspectiveSettingsDynamoAppSyncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-AppSyncDynamoRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                Resource: !GetAtt PerspectiveSettingsTable.Arn

  PerspectiveSettingsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-AppSyncLambdaRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                Resource: !GetAtt PerspectiveSettingsTable.Arn
              - Effect: Allow
                Action:
                  - config:putConfigurationAggregator
                Resource: !Sub arn:aws:config:${AWS::Region}:${AWS::AccountId}*

  PerspectiveSettingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt PerspectiveSettingsLambdaRole.Arn
      Handler: index.handler
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: !Sub ${DeploymentBucketKey}/settings.zip
      Runtime: nodejs12.x
      Description: Lambda for Appsync resolvers
      Timeout: 10
      MemorySize: 1024
      Tracing: Active
      Environment:
        Variables:
          DB_TABLE: !Ref PerspectiveSettingsTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
          CONFIG_AGGREGATOR: !Ref ConfigurationAggregator

  PerspectiveSettingsLambdaAppSyncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-AppSyncRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt PerspectiveSettingsFunction.Arn

  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      DefinitionS3Location: !Sub s3://${DeploymentBucket}/${DeploymentBucketKey}/perspectiveConfig.graphql

  PerspectiveAppSyncSettingsLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      Name: Perspective_AppSync_Api_Settings_Lambda_Source
      Description: Perspective Lambda AppSync Data Source
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt PerspectiveSettingsLambdaAppSyncRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt PerspectiveSettingsFunction.Arn

  PerspectiveAppSyncSettingsTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      Name: Perspective_AppSync_Api_Settings_Table_Source
      Description: Perspective Table AppSync Data Source
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt PerspectiveSettingsDynamoAppSyncRole.Arn
      DynamoDBConfig:
        TableName: !Ref PerspectiveSettingsTable
        AwsRegion: !Sub ${AWS::Region}

  PerspectiveAppSyncGetAccountQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Query
      FieldName: getAccount
      DataSourceName: !GetAtt PerspectiveAppSyncSettingsTableDataSource.Name
      RequestMappingTemplate: |
        {
            "version" : "2017-02-28",
            "operation" : "Query",
            "query" : {
                "expression": "PK = :pk and begins_with(SK, :composite)",
                "expressionValues" : {
                    ":pk" : {
                        "S" : "Account"
                    },
                    ":composite": {
                        "S": "ACCNUMBER#$ctx.args.accountId"
                    }
                }
            }
        }
      ResponseMappingTemplate: |
        #set($result = {"accountId": "$ctx.args.accountId"})
        #set($regions = [])

        #foreach($item in $ctx.result.items)
        	#if($item.type.equals("account"))
            	$util.qr($result.put("lastCrawled", "$item.lastCrawled"))
            #elseif($item.type.equals("region"))
              $util.qr($regions.add({
                "name": "$item.name",
                "lastCrawled": "$item.lastCrawled"
              }))
            #end
        #end

        $util.qr($result.put("regions", $regions))

        $util.toJson($result)

  PerspectiveAppSyncAddRegionsMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Mutation
      FieldName: addRegions
      DataSourceName: !GetAtt PerspectiveAppSyncSettingsTableDataSource.Name
      RequestMappingTemplate: !Sub |
        #set($accountId = $ctx.args.accountId)
        #set($regions = [])
        #foreach($region in $ctx.args.regions)
            #set( $attrs = {
              "PK": "Account",
              "SK": "ACCNUMBER#$accountId#REGION#$region.name",
              "name": "$region.name",
              "accountId": "$accountId",
              "type": "region"
            } )
            #if($region.lastCrawled)
            	$util.qr($attrs.put("lastCrawled", "$region.lastCrawled"))
            #end
            $util.qr($regions.add($util.dynamodb.toMapValues($attrs)))
        #end

        {
          "version": "2018-05-29",
          "operation": "BatchPutItem",
          "tables": {
            "${PerspectiveSettingsTable}": $utils.toJson($regions)
          }
        }
      ResponseMappingTemplate: |
        {
          "accountId": "$ctx.args.accountId",
          "regions": $utils.toJson($ctx.args.regions)
        }

  PerspectiveAppSyncDeleteRegionsMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Mutation
      FieldName: deleteRegions
      DataSourceName: !GetAtt PerspectiveAppSyncSettingsTableDataSource.Name
      RequestMappingTemplate: !Sub |
        #set($accountId = $ctx.args.accountId)
        #set($regions = [])
        #foreach($region in $ctx.args.regions)
            #set( $attrs = {
              "PK": "Account",
              "SK": "ACCNUMBER#$accountId#REGION#$region.name"
            } )
            $util.qr($regions.add($util.dynamodb.toMapValues($attrs)))
        #end

        {
          "version": "2018-05-29",
          "operation": "BatchDeleteItem",
          "tables": {
            "${PerspectiveSettingsTable}": $utils.toJson($regions)
          }
        }
      ResponseMappingTemplate: |
        {
          "accountId": "$ctx.args.accountId",
          "regions": $utils.toJson($ctx.args.regions)
        }

  PerspectiveAppSyncGetAccountsQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Query
      FieldName: getAccounts
      DataSourceName: !GetAtt PerspectiveAppSyncSettingsLambdaDataSource.Name

  PerspectiveAppSyncAddAccountsMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Mutation
      FieldName: addAccounts
      DataSourceName: !GetAtt PerspectiveAppSyncSettingsLambdaDataSource.Name

  PerspectiveAppSyncUpdateAccountMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Mutation
      FieldName: updateAccount
      DataSourceName: !GetAtt PerspectiveAppSyncSettingsLambdaDataSource.Name

  PerspectiveAppSyncUpdateRegionsMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Mutation
      FieldName: updateRegions
      DataSourceName: !GetAtt PerspectiveAppSyncSettingsLambdaDataSource.Name

  PerspectiveAppSyncDeleteAccountsMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !Ref PerspectiveAppSyncApiId
      TypeName: Mutation
      FieldName: deleteAccounts
      DataSourceName: !GetAtt PerspectiveAppSyncSettingsLambdaDataSource.Name

#Outputs:
#
#  AppSyncApiArn:
#    Description: The URL to the Perspective GraphQL endpoint
#    Value: !GetAtt PerspectiveAppSyncApi.Arn
#
#  AppSyncApiId:
#    Description: The API ID of the Perspective GraphQL API
#    Value: !GetAtt PerspectiveAppSyncApi.ApiId
#
#  AppSyncApiUrl:
#    Description: The API ID of the Perspective GraphQL API
#    Value: !GetAtt PerspectiveAppSyncApi.GraphQLUrl
